rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isUserAuthenticated(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function existingData() {
      return resource.data;
    }
    
    function incomingData() {
      return request.resource.data;
    }
    
    function userExists(userId) {
      return exists(/databases/$(database)/documents/users/$(userId));
    }
    
    function isInvolvedInMatch(matchData) {
      return isAuthenticated() && matchData.users.hasAny([request.auth.uid]);
    }
    
    // Allow users to read and write their own data
    match /users/{userId} {
      // Allow reading any user profile for discovery
      allow read: if isAuthenticated();
      
      // Only allow users to update their own data
      allow create, update: if isUserAuthenticated(userId);
      allow delete: if false; // Never allow deletion
      
      // Special location fields for GeoFirestore
      function isValidLocationUpdate() {
        return 
          incomingData().keys().hasAny(['location', 'coordinates', 'g', 'd']) &&
          (
            !incomingData().keys().hasAll(['location']) || 
            (incomingData().location is map && 
             incomingData().location.keys().hasAll(['latitude', 'longitude']) &&
             incomingData().location.latitude is number &&
             incomingData().location.longitude is number)
          );
      }
      
      // Allow specific location-related fields update
      allow update: if isUserAuthenticated(userId) && isValidLocationUpdate();
      
      // User preferences (for matching algorithm)
      match /preferences/{document=**} {
        allow read, write: if isUserAuthenticated(userId);
      }
    }
    
    // User preferences for discovery
    match /userPreferences/{userId} {
      allow read: if isUserAuthenticated(userId);
      allow write: if isUserAuthenticated(userId);
    }
    
    // Swipes collection - store likes and passes
    match /swipes/{swipeId} {
      // Only allow users to create their own swipes
      allow create: if isAuthenticated() && 
                     incomingData().userId == request.auth.uid &&
                     userExists(incomingData().targetUserId) &&
                     (incomingData().action == "like" || 
                      incomingData().action == "pass" || 
                      incomingData().action == "superlike");
      
      // Only allow the swipe creator to read their own swipes
      allow read: if isAuthenticated() && 
                   (existingData().userId == request.auth.uid || 
                    existingData().targetUserId == request.auth.uid);
      
      // Don't allow swipes to be updated or deleted
      allow update, delete: if false;
    }
    
    // Matches collection - created when two users like each other
    match /matches/{matchId} {
      // Only allow reads for users involved in the match
      allow read: if isInvolvedInMatch(existingData());
      
      // Only allow match creation by the involved users (or system)
      allow create: if isAuthenticated() && 
                     incomingData().users.hasAll([request.auth.uid]) && 
                     incomingData().users.size() == 2 && 
                     incomingData().status == "active" &&
                     incomingData().initiatedBy == request.auth.uid;
      
      // Only allow updates if user is part of the match
      // and only allow specific fields to be updated
      allow update: if isInvolvedInMatch(existingData()) && 
                     (incomingData().diff(existingData()).affectedKeys()
                      .hasOnly(["status", "lastInteractionAt"]));
      
      // Don't allow matches to be deleted
      allow delete: if false;
    }
    
    // Analytics - only admin access
    match /analytics/{document=**} {
      allow read, write: if false; // Only allow via Cloud Functions
    }
    
    // Messages within matches
    match /matches/{matchId}/messages/{messageId} {
      // Users can only read messages from matches they're involved in
      allow read: if isAuthenticated();
      
      // Users can create messages if they're authenticated
      allow create: if isAuthenticated();
      
      // Allow update but not delete
      allow update: if isAuthenticated();
      allow delete: if false;
    }
    
    // User FCM tokens for notifications
    match /fcmTokens/{tokenId} {
      allow read: if false;
      allow create: if isAuthenticated() && incomingData().userId == request.auth.uid;
      allow update: if isAuthenticated() && existingData().userId == request.auth.uid;
      allow delete: if isAuthenticated() && existingData().userId == request.auth.uid;
    }
    
    // Conversations collection for messaging
    match /conversations/{conversationId} {
      allow read: if isAuthenticated();
      
      allow create: if isAuthenticated() && 
                    incomingData().participants.hasAny([request.auth.uid]) &&
                    incomingData().participants.size() == 2;
      
      allow update: if isAuthenticated();
                   
      // Messages subcollection
      match /messages/{messageId} {
        allow read: if isAuthenticated();
        
        allow create: if isAuthenticated();
        
        allow update: if isAuthenticated();
      }
    }
    
    // Typing indicators collection
    match /typingIndicators/{indicatorId} {
      allow read, write: if isAuthenticated();
    }
  }
} 