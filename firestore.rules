rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isUserAuthenticated(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function existingData() {
      return resource.data;
    }
    
    function incomingData() {
      return request.resource.data;
    }
    

    
    function isInvolvedInMatch(matchData) {
      return isAuthenticated() && matchData.users.hasAny([request.auth.uid]);
    }
    
    // TEMPORARY: Allow full access to users collection
    match /users/{userId} {
      // Allow full read/write access temporarily
      allow read, write: if true;
      
      // User preferences (for matching algorithm)
      match /preferences/{document=**} {
        allow read, write: if isUserAuthenticated(userId);
      }
    }
    
    // Rest of your rules remain the same
    // User preferences for discovery
    match /userPreferences/{userId} {
      allow read: if isUserAuthenticated(userId);
      allow write: if isUserAuthenticated(userId);
    }
    
    // Swipes collection - store likes and passes
    match /swipes/{swipeId} {
      // Very permissive rule for testing - just require authentication
      // This avoids issues with document ID formats and field validation
      allow create, update: if isAuthenticated();
      
      // Anyone can read any swipe document for testing purposes
      allow read: if isAuthenticated();
      
      // Don't allow deletes
      allow delete: if false;
    }
    
    // Matches collection - created when two users like each other
    match /matches/{matchId} {
      // Only allow reads for users involved in the match
      allow read: if isInvolvedInMatch(existingData());
      
      // Only allow match creation by the involved users (or system)
      allow create: if isAuthenticated() && 
                     incomingData().users is list &&
                     incomingData().users.hasAny([request.auth.uid]) && 
                     incomingData().users.size() == 2 && 
                     incomingData().status == "active";
      
      // Only allow updates if user is part of the match
      // and only allow specific fields to be updated
      allow update: if isInvolvedInMatch(existingData()) && 
                     (incomingData().diff(existingData()).affectedKeys()
                      .hasOnly(["status", "lastInteractionAt"]));
      
      // Don't allow matches to be deleted
      allow delete: if false;
    }
    
    // Analytics - only admin access
    match /analytics/{document=**} {
      allow read, write: if false; // Only allow via Cloud Functions
    }
    
    // Messages within matches
    match /matches/{matchId}/messages/{messageId} {
      // Users can only read messages from matches they're involved in
      allow read: if isAuthenticated();
      
      // Users can create messages if they're authenticated
      allow create: if isAuthenticated();
      
      // Allow update but not delete
      allow update: if isAuthenticated();
      allow delete: if false;
    }
    
    // User FCM tokens for notifications
    match /fcmTokens/{tokenId} {
      allow read: if false;
      allow create: if isAuthenticated() && incomingData().userId == request.auth.uid;
      allow update: if isAuthenticated() && existingData().userId == request.auth.uid;
      allow delete: if isAuthenticated() && existingData().userId == request.auth.uid;
    }
    
    // Conversations collection for messaging
    match /conversations/{conversationId} {
      allow read: if isAuthenticated();
      
      allow create: if isAuthenticated() && 
                    incomingData().participants.hasAny([request.auth.uid]) &&
                    incomingData().participants.size() == 2;
      
      allow update: if isAuthenticated();
                   
      // Messages subcollection
      match /messages/{messageId} {
        allow read: if isAuthenticated();
        
        allow create: if isAuthenticated();
        
        allow update: if isAuthenticated();
      }
    }
    
    // Typing indicators collection
    match /typingIndicators/{indicatorId} {
      allow read, write: if isAuthenticated();
    }
    
    // Super Likes collection - track daily usage
    match /superLikes/{userId} {
      // Users can only read/write their own super like data
      allow read, write: if isUserAuthenticated(userId);
    }
    
    // Super Like usage collection - track individual super like actions
    match /superLikeUsage/{usageId} {
      // Allow reading for existence checks - parse the document ID to validate ownership
      // Document ID format: {userId}_{targetUserId}_{dayKey}
      allow read: if isAuthenticated() && 
                   (usageId.split('_')[0] == request.auth.uid ||
                    (resource != null && 
                     (resource.data.userId == request.auth.uid || 
                      resource.data.targetUserId == request.auth.uid)));
      
      // Only allow creation by authenticated users for their own usage
      allow create: if isAuthenticated() && 
                     incomingData().userId == request.auth.uid &&
                     usageId.split('_')[0] == request.auth.uid;
      
      // Allow updates to super like data (for resets and modifications)
      allow update: if isAuthenticated() && 
                     resource.data.userId == request.auth.uid;
      
      // Don't allow deletes
      allow delete: if false;
    }
  }
} 